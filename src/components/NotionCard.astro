---
export interface Props {
  title: string;
  properties?: {
    [key: string]: {
      type: 'text' | 'select' | 'multi-select' | 'date' | 'number' | 'url' | 'email' | 'phone' | 'checkbox' | 'person';
      value: string | string[] | number | boolean | Date;
      color?: 'default' | 'gray' | 'brown' | 'orange' | 'yellow' | 'green' | 'blue' | 'purple' | 'pink' | 'red';
    };
  };
  image?: string;
  imageAlt?: string;
  onClick?: () => void;
  className?: string;
  size?: 'small' | 'medium' | 'large';
  imageBg?: string;
}

const { 
  title, 
  properties = {}, 
  image, 
  imageAlt = '', 
  onClick,
  className = '',
  size = 'medium',
  imageBg = 'bg-zinc-800',
} = Astro.props;

import { Image } from 'astro:assets';

const getPropertyValue = (property: any) => {
  if (property.type === 'checkbox') {
    return property.value;
  }
  if (property.type === 'multi-select' && Array.isArray(property.value)) {
    return property.value;
  }
  if (property.type === 'date' && property.value instanceof Date) {
    return property.value.toLocaleDateString();
  }
  return property.value;
};

const getTagClasses = (color: string = 'default') => {
  const colorClasses = {
    default: 'bg-zinc-800 text-zinc-200',
    gray: 'bg-zinc-700 text-zinc-300',
    brown: 'bg-amber-900 text-amber-200',
    orange: 'bg-orange-900 text-orange-200',
    yellow: 'bg-yellow-900 text-yellow-200',
    green: 'bg-green-900 text-green-200',
    blue: 'bg-blue-900 text-blue-200',
    purple: 'bg-purple-900 text-purple-200',
    pink: 'bg-pink-900 text-pink-200',
    red: 'bg-red-900 text-red-200'
  };
  return colorClasses[color as keyof typeof colorClasses] || colorClasses.default;
};

const allowedSizes = ['small', 'medium', 'large'] as const;
type SizeType = typeof allowedSizes[number];
const safeSize: SizeType = allowedSizes.includes(size as SizeType) ? size as SizeType : 'medium';
const sizeClasses = {
  small: {
    card: 'p-2',
    image: 'h-20',
    title: 'text-base',
  },
  medium: {
    card: 'p-4',
    image: 'h-32',
    title: 'text-lg',
  },
  large: {
    card: 'p-8',
    image: 'h-48',
    title: 'text-2xl',
  }
}[safeSize];
---

<div class={`notion-card bg-zinc-900 rounded-lg border border-zinc-700 shadow-sm shadow-black/30 hover:shadow-md transition-shadow duration-200 ${onClick ? 'cursor-pointer' : ''} ${className} ${sizeClasses.card}`} data-onclick={onClick ? 'true' : 'false'}>
  {image && (
    <div class={`notion-card-image w-full ${sizeClasses.image} ${imageBg} p-2 rounded-t-lg`}>
      <Image src={image} alt={imageAlt} class="w-full h-full object-cover" />
    </div>
  )}
  
  <div class="notion-card-content">
    <h3 class={`notion-card-title font-semibold text-white mb-3 line-clamp-2 ${sizeClasses.title}`}>
      {title}
    </h3>
    
    <div class="notion-card-properties space-y-2">
      {Object.entries(properties).map(([key, property]) => {
        const prop = property as {
          type: 'text' | 'select' | 'multi-select' | 'date' | 'number' | 'url' | 'email' | 'phone' | 'checkbox' | 'person';
          value: string | string[] | number | boolean | Date;
          color?: 'default' | 'gray' | 'brown' | 'orange' | 'yellow' | 'green' | 'blue' | 'purple' | 'pink' | 'red';
        };
        return (
        <div class="notion-property">
          <div class="notion-property-label text-xs font-medium text-zinc-400 uppercase tracking-wide mb-1">
            {key}
          </div>
          <div class="notion-property-value">
            {prop.type === 'checkbox' && (
              <div class="flex items-center">
                <div class={`w-4 h-4 rounded border-2 flex items-center justify-center ${prop.value ? 'bg-blue-600 border-blue-600' : 'border-zinc-600'}`}>
                  {prop.value && (
                    <svg class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  )}
                </div>
              </div>
            )}
            
            {prop.type === 'select' && (
              <span class={`inline-block px-2 py-1 text-xs font-medium rounded-full ${getTagClasses(prop.color)}`}>
                {prop.value as string}
              </span>
            )}
            
            {prop.type === 'multi-select' && Array.isArray(prop.value) && (
              <div class="flex flex-wrap gap-1">
                {(prop.value as string[]).map((item, index) => (
                  <span class={`inline-block px-2 py-1 text-xs font-medium rounded-full ${getTagClasses(prop.color)}`}>
                    {item}
                  </span>
                ))}
              </div>
            )}
            
            {prop.type === 'text' && (
              <p class="text-sm text-zinc-200 line-clamp-2">{prop.value as string}</p>
            )}
            
            {prop.type === 'number' && (
              <span class="text-sm text-zinc-200 font-medium">{prop.value as number}</span>
            )}
            
            {prop.type === 'date' && (
              <span class="text-sm text-zinc-200">{getPropertyValue(prop)}</span>
            )}
            
            {prop.type === 'url' && (
              <a href={prop.value as string} target="_blank" rel="noopener noreferrer" class="text-sm text-blue-300 hover:text-blue-400 underline truncate block">
                {prop.value as string}
              </a>
            )}
            
            {prop.type === 'email' && (
              <a href={`mailto:${prop.value}`} class="text-sm text-blue-300 hover:text-blue-400 underline">
                {prop.value as string}
              </a>
            )}
            
            {prop.type === 'phone' && (
              <a href={`tel:${prop.value}`} class="text-sm text-blue-300 hover:text-blue-400 underline">
                {prop.value as string}
              </a>
            )}
            
            {prop.type === 'person' && (
              <div class="flex items-center space-x-2">
                <div class="w-6 h-6 bg-zinc-700 rounded-full flex items-center justify-center">
                  <span class="text-xs font-medium text-zinc-200">
                    {(prop.value as string).charAt(0).toUpperCase()}
                  </span>
                </div>
                <span class="text-sm text-zinc-200">{prop.value as string}</span>
              </div>
            )}
          </div>
        </div>
      );
      })}
    </div>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .notion-card:hover {
    transform: translateY(-1px);
  }
  
  .notion-property-value a {
    word-break: break-all;
  }
</style>

<script>
  // Handle click events for cards
  document.addEventListener('DOMContentLoaded', function() {
    const cards = document.querySelectorAll('.notion-card[data-onclick="true"]');
    
    cards.forEach(card => {
      card.addEventListener('click', (e) => {
        // Prevent click if clicking on a link inside the card
        if ((e.target as HTMLElement).closest('a')) {
          return;
        }
        
        // You can add custom click handling here
        console.log('Card clicked:', card);
      });
    });
  });
</script> 