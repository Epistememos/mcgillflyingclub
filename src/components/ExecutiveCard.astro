---
export interface Props {
  name: string;
  role: string;
  years?: string;
  image?: any; // static import, like NotionCard
  imageAlt?: string;
  bio?: string;
  description?: string;
  className?: string;
  size?: 'small' | 'medium' | 'large';
  imageBg?: string;
  properties?: {
    [key: string]: {
      type: 'text' | 'select' | 'multi-select' | 'date' | 'number' | 'url' | 'email' | 'phone' | 'checkbox' | 'person';
      value: string | string[] | number | boolean | Date;
      color?: 'default' | 'gray' | 'brown' | 'orange' | 'yellow' | 'green' | 'blue' | 'purple' | 'pink' | 'red';
    };
  };
}

const {
  name,
  role,
  years,
  image,
  imageAlt = '',
  bio,
  description,
  className = '',
  size = 'medium',
  imageBg = 'bg-zinc-800',
  properties = {},
} = Astro.props;

import { Image } from 'astro:assets';

const getPropertyValue = (property: any) => {
  if (property.type === 'checkbox') {
    return property.value;
  }
  if (property.type === 'multi-select' && Array.isArray(property.value)) {
    return property.value;
  }
  if (property.type === 'date' && property.value instanceof Date) {
    return property.value.toLocaleDateString();
  }
  return property.value;
};

const getTagClasses = (color: string = 'default') => {
  const colorClasses = {
    default: 'bg-zinc-800 text-zinc-200',
    gray: 'bg-zinc-700 text-zinc-300',
    brown: 'bg-amber-900 text-amber-200',
    orange: 'bg-orange-900 text-orange-200',
    yellow: 'bg-yellow-900 text-yellow-200',
    green: 'bg-green-900 text-green-200',
    blue: 'bg-blue-900 text-blue-200',
    purple: 'bg-purple-900 text-purple-200',
    pink: 'bg-pink-900 text-pink-200',
    red: 'bg-red-900 text-red-200'
  };
  return colorClasses[color as keyof typeof colorClasses] || colorClasses.default;
};

const allowedSizes = ['small', 'medium', 'large'] as const;
type SizeType = typeof allowedSizes[number];
const safeSize: SizeType = allowedSizes.includes(size as SizeType) ? size as SizeType : 'medium';
const sizeClasses = {
  small: {
    card: 'p-2',
    image: 'w-full aspect-square',
    title: 'text-base',
  },
  medium: {
    card: 'p-4',
    image: 'w-full aspect-square',
    title: 'text-lg',
  },
  large: {
    card: 'p-8',
    image: 'w-full aspect-square',
    title: 'text-2xl',
  }
}[safeSize];
---

<div class={`notion-card bg-zinc-900 rounded-lg border border-zinc-700 shadow-sm shadow-black/30 hover:shadow-md transition-shadow duration-200 ${className} ${sizeClasses.card}`}>
  <div class={`notion-card-image w-full ${sizeClasses.image} ${imageBg} p-2 rounded-t-lg overflow-hidden flex items-center justify-center`}>
    {image ? (
      <Image src={image} alt={imageAlt || name} class="w-full h-full object-cover rounded-t-lg" />
    ) : (
      <div class="w-20 h-20 rounded-full bg-zinc-700 flex items-center justify-center text-3xl text-blue-300 font-bold">
        {name.charAt(0)}
      </div>
    )}
  </div>
  <div class="notion-card-content text-center">
    <h3 class={`notion-card-title font-semibold text-white mb-3 pt-2 line-clamp-2 ${sizeClasses.title}`}>{name}</h3>
    {description && <p class="text-zinc-300 mb-1 text-sm text-justify">{description}</p>}
    <p class="text-zinc-200 mb-1 text-base font-bold">{role}</p>
    {years && <p class="text-zinc-500 text-sm mb-1">{years}</p>}
    {bio && <p class="text-zinc-200 text-sm mt-2">{bio}</p>}
    {/* LinkedIn icon if LinkedIn property exists */}
    {properties["LinkedIn"] && properties["LinkedIn"].type === "url" && (
      <div class="flex justify-center mt-2">
        <a href={properties["LinkedIn"].value as string} target="_blank" rel="noopener noreferrer" aria-label="LinkedIn profile" class="inline-block hover:scale-110 transition-transform group">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" class="w-7 h-7 fill-white group-hover:fill-black transition-colors">
            <path d="M 9 4 C 6.2504839 4 4 6.2504839 4 9 L 4 41 C 4 43.749516 6.2504839 46 9 46 L 41 46 C 43.749516 46 46 43.749516 46 41 L 46 9 C 46 6.2504839 43.749516 4 41 4 L 9 4 z M 9 6 L 41 6 C 42.668484 6 44 7.3315161 44 9 L 44 41 C 44 42.668484 42.668484 44 41 44 L 9 44 C 7.3315161 44 6 42.668484 6 41 L 6 9 C 6 7.3315161 7.3315161 6 9 6 z M 14 11.011719 C 12.904779 11.011719 11.919219 11.339079 11.189453 11.953125 C 10.459687 12.567171 10.011719 13.484511 10.011719 14.466797 C 10.011719 16.333977 11.631285 17.789609 13.691406 17.933594 A 0.98809878 0.98809878 0 0 0 13.695312 17.935547 A 0.98809878 0.98809878 0 0 0 14 17.988281 C 16.27301 17.988281 17.988281 16.396083 17.988281 14.466797 A 0.98809878 0.98809878 0 0 0 17.986328 14.414062 C 17.884577 12.513831 16.190443 11.011719 14 11.011719 z M 14 12.988281 C 15.392231 12.988281 15.94197 13.610038 16.001953 14.492188 C 15.989803 15.348434 15.460091 16.011719 14 16.011719 C 12.614594 16.011719 11.988281 15.302225 11.988281 14.466797 C 11.988281 14.049083 12.140703 13.734298 12.460938 13.464844 C 12.78117 13.19539 13.295221 12.988281 14 12.988281 z M 11 19 A 1.0001 1.0001 0 0 0 10 20 L 10 39 A 1.0001 1.0001 0 0 0 11 40 L 17 40 A 1.0001 1.0001 0 0 0 18 39 L 18 33.134766 L 18 20 A 1.0001 1.0001 0 0 0 17 19 L 11 19 z M 20 19 A 1.0001 1.0001 0 0 0 19 20 L 19 39 A 1.0001 1.0001 0 0 0 20 40 L 26 40 A 1.0001 1.0001 0 0 0 27 39 L 27 29 C 27 28.170333 27.226394 27.345035 27.625 26.804688 C 28.023606 26.264339 28.526466 25.940057 29.482422 25.957031 C 30.468166 25.973981 30.989999 26.311669 31.384766 26.841797 C 31.779532 27.371924 32 28.166667 32 29 L 32 39 A 1.0001 1.0001 0 0 0 33 40 L 39 40 A 1.0001 1.0001 0 0 0 40 39 L 40 28.261719 C 40 25.300181 39.122788 22.95433 37.619141 21.367188 C 36.115493 19.780044 34.024172 19 31.8125 19 C 29.710483 19 28.110853 19.704889 27 20.423828 L 27 20 A 1.0001 1.0001 0 0 0 26 19 L 20 19 z M 12 21 L 16 21 L 16 33.134766 L 16 38 L 12 38 L 12 21 z M 21 21 L 25 21 L 25 22.560547 A 1.0001 1.0001 0 0 0 26.798828 23.162109 C 26.798828 23.162109 28.369194 21 31.8125 21 C 33.565828 21 35.069366 21.582581 36.167969 22.742188 C 37.266572 23.901794 38 25.688257 38 28.261719 L 38 38 L 34 38 L 34 29 C 34 27.833333 33.720468 26.627107 32.990234 25.646484 C 32.260001 24.665862 31.031834 23.983076 29.517578 23.957031 C 27.995534 23.930001 26.747519 24.626988 26.015625 25.619141 C 25.283731 26.611293 25 27.829667 25 29 L 25 38 L 21 38 L 21 21 z"></path>
          </svg>
        </a>
      </div>
    )}
    {Object.keys(properties).length > 0 && (
      <div class="notion-card-properties space-y-2 mt-4 text-left">
        {Object.entries(properties).map(([key, property]) => {
          const prop = property as {
            type: 'text' | 'select' | 'multi-select' | 'date' | 'number' | 'url' | 'email' | 'phone' | 'checkbox' | 'person';
            value: string | string[] | number | boolean | Date;
            color?: 'default' | 'gray' | 'brown' | 'orange' | 'yellow' | 'green' | 'blue' | 'purple' | 'pink' | 'red';
          };
          return (
            <div class="notion-property">
              {key !== 'LinkedIn' && (
                <div class="notion-property-label text-xs font-medium text-zinc-400 uppercase tracking-wide mb-1">
                  {key}
                </div>
              )}
              <div class="notion-property-value">
                {prop.type === 'checkbox' && (
                  <div class="flex items-center">
                    <div class={`w-4 h-4 rounded border-2 flex items-center justify-center ${prop.value ? 'bg-blue-600 border-blue-600' : 'border-zinc-600'}`}>
                      {prop.value && (
                        <svg class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                        </svg>
                      )}
                    </div>
                  </div>
                )}
                {prop.type === 'select' && (
                  <span class={`inline-block px-2 py-1 text-xs font-medium rounded-full ${getTagClasses(prop.color)}`}>
                    {prop.value as string}
                  </span>
                )}
                {prop.type === 'multi-select' && Array.isArray(prop.value) && (
                  <div class="flex flex-wrap gap-1">
                    {(prop.value as any[]).map((item, index) => (
                      <span class={`inline-block px-2 py-1 text-xs font-medium rounded-full ${getTagClasses(typeof item === 'string' ? prop.color : item.color || prop.color)}`}>
                        {typeof item === 'string' ? item : item.value}
                      </span>
                    ))}
                  </div>
                )}
                {prop.type === 'text' && (
                  <p class="text-sm text-zinc-200 line-clamp-2">{prop.value as string}</p>
                )}
                {prop.type === 'number' && (
                  <span class="text-sm text-zinc-200 font-medium">{prop.value as number}</span>
                )}
                {prop.type === 'date' && (
                  <span class="text-sm text-zinc-200">{getPropertyValue(prop)}</span>
                )}
                {prop.type === 'url' && key !== 'LinkedIn' && (
                  <a href={prop.value as string} target="_blank" rel="noopener noreferrer" class="text-sm text-blue-300 hover:text-blue-400 underline truncate block">
                    {prop.value as string}
                  </a>
                )}
                {prop.type === 'email' && (
                  <a href={`mailto:${prop.value}`} class="text-sm text-blue-300 hover:text-blue-400 underline">
                    {prop.value as string}
                  </a>
                )}
                {prop.type === 'phone' && (
                  <a href={`tel:${prop.value}`} class="text-sm text-blue-300 hover:text-blue-400 underline">
                    {prop.value as string}
                  </a>
                )}
                {prop.type === 'person' && (
                  <div class="flex items-center space-x-2">
                    <div class="w-6 h-6 bg-zinc-700 rounded-full flex items-center justify-center">
                      <span class="text-xs font-medium text-zinc-200">
                        {(prop.value as string).charAt(0).toUpperCase()}
                      </span>
                    </div>
                    <span class="text-sm text-zinc-200">{prop.value as string}</span>
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>
    )}
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .notion-card:hover {
    transform: translateY(-1px);
  }
  .notion-property-value a {
    word-break: break-all;
  }
</style> 